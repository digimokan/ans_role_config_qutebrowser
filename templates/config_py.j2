# vim: set filetype=python:
# pylint: disable=C0111,C0305,E0602
# ANSIBLE-MANAGED CONFIGURATION FILE
# Set Up:      https://qutebrowser.org/doc/help/configuring.html
# All Options: https://qutebrowser.org/doc/help/settings.html

################################################################################
# CONFIG SOURCES
################################################################################

# don't load any config done in qutebrowser GUI (only use config.py)
config.load_autoconfig(False)

################################################################################
# PATHS
################################################################################

# qutebrowser will download files to this directory
config.set('downloads.location.directory', '{{ qutebrowser_user_download_dir }}')

################################################################################
# FONTS
################################################################################

# fonts for Sans UI elements
config.set('fonts.tabs.selected', '{{ qutebrowser_tab_bar_font }}')
config.set('fonts.tabs.unselected', '{{ qutebrowser_tab_bar_font }}')
config.set('fonts.completion.category', '{{ qutebrowser_completion_categories_font }}')
config.set('fonts.completion.entry', '{{ qutebrowser_completion_text_font }}')

# fonts for Serif UI elements
config.set('fonts.prompts', '{{ qutebrowser_prompt_font }}')

# fonts for Mono UI elements
config.set('fonts.hints', '{{ qutebrowser_hints_font }}')
config.set('fonts.keyhint', '{{ qutebrowser_hints_font }}')
config.set('fonts.downloads', '{{ qutebrowser_downloads_bar_font }}')
config.set('fonts.statusbar', '{{ qutebrowser_statusbar_url_font }}')
config.set('fonts.messages.info', '{{ qutebrowser_statusbar_messages_font }}')
config.set('fonts.messages.warning', '{{ qutebrowser_statusbar_messages_font }}')
config.set('fonts.messages.error', '{{ qutebrowser_statusbar_messages_font }}')
config.set('fonts.debug_console', '{{ qutebrowser_debug_console_font }}')

# fonts used for web pages
config.set('fonts.web.family.sans_serif', '{{ qutebrowser_sans_font_family }}')
config.set('fonts.web.family.serif', '{{ qutebrowser_serif_font_family }}')
config.set('fonts.web.family.fixed', '{{ qutebrowser_mono_font_family }}')
config.set('fonts.web.family.standard', '{{ qutebrowser_serif_font_family }}')
config.set('fonts.web.size.default', {{ qutebrowser_web_text_font_size_pts }})
config.set('fonts.web.size.default_fixed', {{ qutebrowser_web_text_font_size_pts }})

################################################################################
# COLORS
################################################################################

# tab-bar colors
config.set('colors.tabs.bar.bg', '{{ qutebrowser_tab_bar_bg_color }}')
config.set('colors.tabs.selected.even.bg', '{{ qutebrowser_tab_bar_active_tab_bg_color }}')
config.set('colors.tabs.selected.odd.bg', '{{ qutebrowser_tab_bar_active_tab_bg_color }}')
config.set('colors.tabs.selected.even.fg', '{{ qutebrowser_tab_bar_active_tab_fg_color }}')
config.set('colors.tabs.selected.odd.fg', '{{ qutebrowser_tab_bar_active_tab_fg_color }}')
config.set('colors.tabs.even.bg', '{{ qutebrowser_tab_bar_inactive_tab_bg_color }}')
config.set('colors.tabs.odd.bg', '{{ qutebrowser_tab_bar_inactive_tab_bg_color }}')
config.set('colors.tabs.even.fg', '{{ qutebrowser_tab_bar_inactive_tab_fg_color }}')
config.set('colors.tabs.odd.fg', '{{ qutebrowser_tab_bar_inactive_tab_fg_color }}')

# completion window colors
config.set(
  'colors.completion.category.bg',
  'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 {{ qutebrowser_completion_category_bg_color }}, stop:1 #505050)')
config.set('colors.completion.category.fg', '{{ qutebrowser_completion_category_fg_color }}')
config.set('colors.completion.fg', '{{ qutebrowser_completion_text_fg_color }}')
config.set('colors.completion.item.selected.bg', '{{ qutebrowser_completion_selected_row_bg_color }}')
config.set('colors.completion.item.selected.fg', '{{ qutebrowser_completion_selected_row_fg_color }}')

# statusbar colors
config.set('colors.statusbar.normal.bg', '{{ qutebrowser_statusbar_default_bg_color }}')
config.set('colors.statusbar.normal.fg', '{{ qutebrowser_statusbar_default_fg_color }}')
config.set('colors.statusbar.private.bg', '{{ qutebrowser_statusbar_private_browsing_bg_color }}')
config.set('colors.statusbar.private.fg', '{{ qutebrowser_statusbar_private_browsing_fg_color }}')
config.set('colors.statusbar.command.bg', '{{ qutebrowser_statusbar_cmd_mode_bg_color }}')
config.set('colors.statusbar.command.fg', '{{ qutebrowser_statusbar_cmd_mode_fg_color }}')
config.set('colors.statusbar.insert.bg', '{{ qutebrowser_statusbar_insert_mode_bg_color }}')
config.set('colors.statusbar.insert.fg', '{{ qutebrowser_statusbar_insert_mode_fg_color }}')
config.set('colors.statusbar.caret.bg', '{{ qutebrowser_statusbar_caret_mode_bg_color }}')
config.set('colors.statusbar.caret.fg', '{{ qutebrowser_statusbar_caret_mode_fg_color }}')
config.set('colors.statusbar.url.fg', '{{ qutebrowser_statusbar_url_fg_color }}')
config.set('colors.statusbar.url.success.https.fg', '{{ qutebrowser_statusbar_url_https_fg_color }}')
config.set('colors.statusbar.url.success.http.fg', '{{ qutebrowser_statusbar_url_http_fg_color }}')
config.set('colors.statusbar.url.warn.fg', '{{ qutebrowser_statusbar_url_warn_fg_color }}')
config.set('colors.statusbar.url.error.fg', '{{ qutebrowser_statusbar_url_error_fg_color }}')
config.set('colors.statusbar.url.hover.fg', '{{ qutebrowser_statusbar_url_hover_fg_color }}')

# web page colors
config.set('colors.webpage.bg', '{{ qutebrowser_web_page_default_bg_color }}')

################################################################################
# PADDING
################################################################################

# padding around title/text in each tab, in pixels
config.set('tabs.padding', {
  'top': {{ qutebrowser_tab_text_padding_top_px }},
  'bottom': {{ qutebrowser_tab_text_padding_bottom_px }},
  'left': {{ qutebrowser_tab_text_padding_left_px }},
  'right': {{ qutebrowser_tab_text_padding_right_px }}
})

# padding around statusbar at bottom of window, in pixels
config.set('statusbar.padding', {
  'top': {{ qutebrowser_statusbar_text_padding_top_px }},
  'bottom': {{ qutebrowser_statusbar_text_padding_bottom_px }},
  'left': {{ qutebrowser_statusbar_text_padding_left_px }},
  'right': {{ qutebrowser_statusbar_text_padding_right_px }}
})

################################################################################
# SETTINGS
################################################################################

# number of items to save in cmd mode history (0 for none, -1 for unlimited)
config.set('completion.cmd_history_max_items', {{ qutebrowser_cmd_mode_history_max_items }})
# forward unbound keys to web page: 'all', 'none', 'auto' (fwd non-alphanumeric)
config.set('input.forward_unbound_keys', '{{ qutebrowser_normal_mode_unbound_key_fwd }}')

# page shown on start, and when opening new tab without arguments
config.set('url.start_pages', ['{{ qutebrowser_home_page }}'])
config.set('url.default_page', '{{ qutebrowser_home_page }}')
# default page-zoom-level (see zoom.levels settings for available levels)
config.set('zoom.default', '{{ qutebrowser_default_page_zoom_level }}')
# accept cookies: 'all', 'never', 'no-3rdparty', 'no-unknown-3rdparty'
config.set('content.cookies.accept', '{{ qutebrowser_cookie_accept_level }}')

# save open tabs, and restore them on next qutebrowser session
config.set('auto_save.session', {{ 'True' if qutebrowser_save_and_restore_tabs else 'False' }})
# which tab to select when the focused tab is removed
config.set('tabs.select_on_remove', '{{ qutebrowser_tab_select_on_remove }}')
# vertical page-loading progress indicator bar placed to left of tab title text
config.set('tabs.indicator.width', {{ qutebrowser_tab_indicator_bar_width_px }})
# when a new tab is launched, open it in the background
config.set('tabs.background', {{ 'True' if qutebrowser_open_new_tab_in_bg else 'False' }})

# show a scrollbar
config.set('scrolling.bar', '{{ qutebrowser_show_scrollbar }}')

# list of hotkey-to-search-provider maps, used in cmd mode
# Note: the first row in this list serves as the default provider
config.set('url.searchengines', {
  'DEFAULT': '{{ qutebrowser_search_providers[0].search_url | replace("%s", "{}") }}',
{% for provider in qutebrowser_search_providers %}
  '{{ provider.hotkeys }}': '{{ provider.search_url | replace("%s", "{}") }}',
{% endfor %}
})

# which mouse button to use to close tabs: 'right', 'middle', 'none'
config.set('tabs.close_mouse_button', '{{ qutebrowser_close_tab_with_mouse_btn }}')
# switch between tabs using the mouse wheel
config.set('tabs.mousewheel_switching', {{ 'True' if qutebrowser_switch_tabs_with_mouse_wheel else 'False' }})

################################################################################
# KEYMAPS: MODES
################################################################################

# clear all default keymaps
config.set('bindings.default', {})

# enter a special mode from page (aka 'normal') mode
config.bind('{{ qutebrowser_keymap_enter_cmd_mode }}', 'set-cmd-text :')
config.bind('{{ qutebrowser_keymap_enter_insert_mode }}', 'mode-enter insert')
config.bind('{{ qutebrowser_keymap_enter_passthrough_mode }}', 'mode-enter passthrough')

# exit a special mode and return to page (aka 'normal') mode
config.bind('{{ qutebrowser_keymap_exit_to_page_mode }}', 'mode-leave', mode='command')
config.bind('{{ qutebrowser_keymap_exit_to_page_mode }}', 'mode-leave', mode='insert')
config.bind('{{ qutebrowser_keymap_exit_to_page_mode }}', 'mode-leave', mode='passthrough')
config.bind('{{ qutebrowser_keymap_exit_to_page_mode }}', 'mode-leave', mode='hint')
config.bind('{{ qutebrowser_keymap_exit_to_page_mode }}', 'mode-leave', mode='prompt')
config.bind('{{ qutebrowser_keymap_exit_to_page_mode }}', 'mode-leave', mode='yesno')
config.bind('{{ qutebrowser_keymap_exit_to_page_mode }}',
            'clear-keychain ;; search ;; fullscreen --leave ;; fake-key <Escape>', mode='normal')

